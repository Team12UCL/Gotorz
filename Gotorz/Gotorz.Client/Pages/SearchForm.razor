@using Shared.Models
@inject ILogger<HotelResults> Logger

<div class="hotel-results">
    <h4>🏨 Available Hotels</h4>
    @if (IsLoadingHotels)
    {
        <div class="loading-container">
            <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
            <p>Searching for hotels...</p>
        </div>
    }
    else if (HotelOffers?.Data?.Count() == 0)
    {
        <div class="error-message">
            No hotel offers found. Please change your search.
        </div>
    }
    else if (HotelError)
    {
        <div class="error-message">
            Error loading hotel data. Please try again.
        </div>
    }
    else if (HotelOffers?.Data?.Any() == true)
    {
        <table class="results-table">
            <thead>
                <tr>
                    <th></th>
                    <th>Hotel Name</th>
                    <th>Price</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var hotel in HotelOffers.Data)
                {
                    <tr class="@(SelectedHotel == hotel ? "selected-row" : "")">
                        <td>
                            <input type="radio" name="hotel" value="@hotel"
                                   @onchange="@(() => OnHotelSelected.InvokeAsync(hotel))"
                                   checked="@(SelectedHotel == hotel)" />
                        </td>
                        <td>
                            <strong>
                                <a href="https://www.google.com/search?q=@Uri.EscapeDataString(hotel.Hotel.Name)" target="_blank">
                                    @hotel.Hotel.Name
                                </a>
                            </strong>
                        </td>
                        <td>
                            @{
                                var offer = hotel.Offers?.FirstOrDefault();
                                var converted = ConvertToEUR(offer?.Price?.Total, offer?.Price?.Currency);
                            }
                            @converted EUR
                        </td>
                        <td>
                            @if (hotel.Offers?.FirstOrDefault()?.BoardType != null)
                            {
                                <div>Board: @hotel.Offers.FirstOrDefault().BoardType</div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hotel offers available.</p>
    }
</div>

@code {
    [Parameter] public HotelOfferRootModel? HotelOffers { get; set; }
    [Parameter] public HotelData? SelectedHotel { get; set; }
    [Parameter] public bool IsLoadingHotels { get; set; }
    [Parameter] public bool HotelError { get; set; }

    [Parameter] public EventCallback<HotelData> OnHotelSelected { get; set; }

    private decimal ConvertToEUR(string? price, string? currency)
    {
        var raw = TryParsePrice(price);

        if (string.IsNullOrWhiteSpace(currency) || currency == "EUR")
        {
            return raw;
        }

        var conversion = HotelOffers?.Dictionaries?.CurrencyConversionLookupRates?.GetValueOrDefault(currency);
        if (conversion == null)
        {
            return raw;
        }

        if (conversion.Target == "EUR" &&
            decimal.TryParse(conversion.Rate, System.Globalization.NumberStyles.Any,
                System.Globalization.CultureInfo.InvariantCulture, out var rate))
        {
            var converted = Math.Round(raw * rate, conversion.TargetDecimalPlaces);
            return converted;
        }

        return raw;
    }

    private decimal TryParsePrice(string? price)
    {
        return decimal.TryParse(price,
            System.Globalization.NumberStyles.Any,
            System.Globalization.CultureInfo.InvariantCulture,
            out var result)
            ? result
            : 0;
    }
}