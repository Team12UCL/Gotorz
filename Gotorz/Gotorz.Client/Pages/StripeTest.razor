@page "/payment/{PackageId:guid}"
@page "/stripetest/{action}"
@using Gotorz.Client.Services
@using Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PricingService PricingService
@rendermode InteractiveWebAssembly

<h3>Stripe Payment Test</h3>
<h4>Payment for Package: @PackageId</h4>
<h4>Payment for Package 2 : @travelPackage.TravelPackageId</h4>

@if (Action == "success")
{
	<div class="alert alert-success text-center">
		<h4>Thanks for your order!</h4>
		<p>
			We appreciate your business! If you have any questions, please email
			<a href="mailto:support@gotorz.com">support@gotorz.com</a>.
		</p>
	</div>
}
else if (Action == "cancel")
{
	<div class="alert alert-warning text-center">
		<h4>Payment Cancelled</h4>
		<p>Your payment was cancelled. Feel free to browse other travel packages.</p>
	</div>
}
else
{
	<div class="card">
		<div class="card-body text-center">
			@if (travelPackage != null)
			{
				<h4>Your booking</h4>
				<p>@DescriptionHtml</p>
				<p><strong>Total price: @TotalPriceFormatted</strong></p>
			}
			<button class="btn btn-primary" @onclick="CreateCheckoutSession" disabled="@IsProcessing">
				@if (IsProcessing)
				{
					<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
					<span> Processing...</span>
				}
				else
				{
					<span>Checkout</span>
				}
			</button>
		</div>
	</div>
}

@code {
	[Parameter]
	public Guid PackageId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public int Adults { get; set; } = 1;

	[Parameter]
	[SupplyParameterFromQuery]
	public int Children { get; set; } = 0;

	[Parameter]
	public string Action { get; set; }

	private TravelPackage? travelPackage;
	private string? errorMessage;
	private bool IsProcessing { get; set; } = false;

	private string DescriptionHtml => travelPackage == null ? string.Empty : $@"
        ✈️ Departure: {OutboundDepartureAirport} to {OutboundArrivalAirport} on {travelPackage.DepartureDate:dd MMM yyyy}<br>
        ✈️ Return: {ReturnDepartureAirport} to {ReturnArrivalAirport} on {travelPackage.ReturnDate:dd MMM yyyy}<br>
        🏨 {StayDuration} night stay at {travelPackage.Hotel.Name} in {travelPackage.DestinationCity}";

	private string TotalPriceFormatted => travelPackage == null
		? string.Empty
		: PricingService.CalculateTotalPrice(
			travelPackage.OutboundFlight,
			travelPackage.ReturnFlight,
			travelPackage.Hotel,
			travelPackage.Hotel?.Offers?.FirstOrDefault(),
			Adults,
			Children
		).ToString("C");

	private int StayDuration => (travelPackage?.ReturnDate - travelPackage?.DepartureDate)?.Days ?? 0;

	private string OutboundDepartureAirport => travelPackage?.OutboundFlight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.DepartureAirport ?? "";
	private string OutboundArrivalAirport => travelPackage?.OutboundFlight.Itineraries.FirstOrDefault()?.Segments.LastOrDefault()?.ArrivalAirport ?? "";
	private string ReturnDepartureAirport => travelPackage?.ReturnFlight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.DepartureAirport ?? "";
	private string ReturnArrivalAirport => travelPackage?.ReturnFlight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.ArrivalAirport ?? "";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			travelPackage = await Http.GetFromJsonAsync<TravelPackage>($"api/travelpackage/{PackageId}");
		}
		catch (Exception ex)
		{
			errorMessage = $"Error when retrieving package details: {ex.Message}";
		}
	}

	private async Task CreateCheckoutSession()
	{
		IsProcessing = true;

		try
		{
			var request = new
			{
				ProductName = $"Trip to {OutboundArrivalAirport} incl. flight & hotel",
				Description = DescriptionHtml.Replace("<br>", "\n"),
				AmountInCents = (long)(PricingService.CalculateTotalPrice(
					travelPackage?.OutboundFlight,
					travelPackage?.ReturnFlight,
					travelPackage?.Hotel,
					travelPackage?.Hotel?.Offers?.FirstOrDefault(),
					Adults,
					Children
				) * 100)
			};

			var response = await Http.PostAsJsonAsync("api/stripe/create-checkout-session", request);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<CheckoutResult>();
				NavigationManager.NavigateTo(result.Url, forceLoad: true);
			}
			else
			{
				Console.Error.WriteLine($"Error creating checkout session: {await response.Content.ReadAsStringAsync()}");
			}
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Exception: {ex.Message}");
		}
		finally
		{
			IsProcessing = false;
		}
	}

	private class CheckoutResult
	{
		public string Url { get; set; } = string.Empty;
	}
}
