@using Shared.Models
@inject ILogger<BookingSummary> Logger

<div class="booking-summary">
    <h4>Booking Summary</h4>
    <div class="summary-content">
        @if (SelectedOutboundFlight != null || SelectedReturnFlight != null || SelectedHotel != null)
        {
            <div class="summary-section">
                <h5>Selected Flights</h5>
                @if (SelectedOutboundFlight != null)
                {
                    <div class="summary-item">
                        <strong>Outbound:</strong> @SelectedOutboundFlight.Itineraries[0].Segments[0].Departure.IataCode to
                        @SelectedOutboundFlight.Itineraries[0].Segments[^1].Arrival.IataCode
                        <div class="summary-detail">
                            <span>Departs: @SelectedOutboundFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
                            <span>@SelectedOutboundFlight.Price.Total @SelectedOutboundFlight.Price.Currency</span>
                        </div>
                    </div>
                }

                @if (SelectedReturnFlight != null)
                {
                    <div class="summary-item">
                        <strong>Return:</strong> @SelectedReturnFlight.Itineraries[0].Segments[0].Departure.IataCode to
                        @SelectedReturnFlight.Itineraries[0].Segments[^1].Arrival.IataCode
                        <div class="summary-detail">
                            <span>Departs: @SelectedReturnFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
                            <span>@SelectedReturnFlight.Price.Total @SelectedReturnFlight.Price.Currency</span>
                        </div>
                    </div>
                }
            </div>

            @if (SelectedHotel != null)
            {
                <div class="summary-section">
                    <h5>Selected Hotel</h5>
                    <div class="summary-item">
                        <strong>@SelectedHotel.Hotel.Name</strong>
                        <div class="summary-detail">
                            <span>Period: @SelectedHotel.Offers?.FirstOrDefault()?.CheckInDate to @SelectedHotel.Offers?.FirstOrDefault()?.CheckOutDate</span>
                            <span>@ConvertToEUR(SelectedHotel.Offers?.FirstOrDefault()?.Price?.Total, SelectedHotel.Offers?.FirstOrDefault()?.Price?.Currency) EUR</span>
                        </div>
                    </div>
                </div>
            }

            @if (TotalPrice > 0)
            {
                <div class="summary-total">
                    <strong>Total Price:</strong> @TotalPrice EUR
                </div>
            }

            <button class="summary-button" @onclick="CreatePackage" disabled="@(!CanCreatePackage)">
                Complete Package
            </button>
        }
        else
        {
            <p>No items selected yet</p>
            <p class="hint-text">Select flights first, then accommodations to complete the package.</p>
        }
    </div>
    @if (!string.IsNullOrEmpty(PackageCreationMessage))
    {
        <div class="@(PackageCreationSuccess ? "success-message" : "error-message")">
            @PackageCreationMessage
        </div>
    }
</div>

@code {
    [Parameter] public FlightOffer? SelectedOutboundFlight { get; set; }
    [Parameter] public FlightOffer? SelectedReturnFlight { get; set; }
    [Parameter] public HotelData? SelectedHotel { get; set; }
    [Parameter] public decimal TotalPrice { get; set; }
    [Parameter] public bool CanCreatePackage { get; set; }
    [Parameter] public string PackageCreationMessage { get; set; } = "";
    [Parameter] public bool PackageCreationSuccess { get; set; }
    [Parameter] public EventCallback OnCreatePackage { get; set; }
    [Parameter] public HotelOfferRootModel? HotelOffers { get; set; }

    private async Task CreatePackage()
    {
        await OnCreatePackage.InvokeAsync();
    }

    private decimal ConvertToEUR(string? price, string? currency)
    {
        var raw = TryParsePrice(price);

        if (string.IsNullOrWhiteSpace(currency) || currency == "EUR")
        {
            return raw;
        }

        var conversion = HotelOffers?.Dictionaries?.CurrencyConversionLookupRates?.GetValueOrDefault(currency);
        if (conversion == null)
        {
            return raw;
        }

        if (conversion.Target == "EUR" &&
            decimal.TryParse(conversion.Rate, System.Globalization.NumberStyles.Any,
                System.Globalization.CultureInfo.InvariantCulture, out var rate))
        {
            var converted = Math.Round(raw * rate, conversion.TargetDecimalPlaces);
            return converted;
        }

        return raw;
    }

    private decimal TryParsePrice(string? price)
    {
        return decimal.TryParse(price,
            System.Globalization.NumberStyles.Any,
            System.Globalization.CultureInfo.InvariantCulture,
            out var result)
            ? result
            : 0;
    }
}