@using Shared.Models
@using Shared.Models.AmadeusCityResponse

<div class="booking-summary">
    <h4>Booking Summary</h4>
    <div class="summary-content">
        @if (OutboundFlight != null || ReturnFlight != null || Hotel != null)
        {
            <div class="summary-section">
                <h5>Selected Flights</h5>
                @if (OutboundFlight != null)
                {
                    <div class="summary-item">
                        <strong>Outbound:</strong> @OutboundFlight.Itineraries[0].Segments[0].Departure.IataCode to
                        @OutboundFlight.Itineraries[0].Segments[^1].Arrival.IataCode
                        <div class="summary-detail">
                            <span>Departs: @OutboundFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
                            <span>@OutboundFlight.Price.Total @OutboundFlight.Price.Currency</span>
                        </div>
                    </div>
                }

                @if (ReturnFlight != null)
                {
                    <div class="summary-item">
                        <strong>Return:</strong> @ReturnFlight.Itineraries[0].Segments[0].Departure.IataCode to
                        @ReturnFlight.Itineraries[0].Segments[^1].Arrival.IataCode
                        <div class="summary-detail">
                            <span>Departs: @ReturnFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
                            <span>@ReturnFlight.Price.Total @ReturnFlight.Price.Currency</span>
                        </div>
                    </div>
                }
            </div>

            @if (Hotel != null)
            {
                <div class="summary-section">
                    <h5>Selected Hotel</h5>
                    <div class="summary-item">
                        <strong>@Hotel.Hotel.Name</strong>
                        <div class="summary-detail">
                            <span>
                                Period: @Hotel.Offers?.FirstOrDefault()?.CheckInDate to
                                @Hotel.Offers?.FirstOrDefault()?.CheckOutDate
                            </span>
                            <span>
                                @ConvertToEUR(Hotel.Offers?.FirstOrDefault()?.Price?.Total,
                                         Hotel.Offers?.FirstOrDefault()?.Price?.Currency) EUR
                            </span>
                        </div>
                    </div>
                </div>
            }

            @if (CalculateTotalPrice() > 0)
            {
                <div class="summary-total">
                    <strong>Total Price:</strong> @CalculateTotalPrice() EUR
                </div>
            }

            <button class="summary-button"
                    @onclick="async () => await OnPackageCreated.InvokeAsync()"
                    disabled="@(!CanCreatePackage())">
                Complete Package
            </button>
        }
        else
        {
            <p>No items selected yet</p>
            <p class="hint-text">Select flights first, then accommodations to complete the package.</p>
        }
    </div>

    @if (!string.IsNullOrEmpty(PackageCreationMessage))
    {
        <div class="@(PackageCreationSuccess ? "success-message" : "error-message")">
            @PackageCreationMessage
        </div>
    }
</div>

@code {
    [Parameter] public FlightOffer? OutboundFlight { get; set; }
    [Parameter] public FlightOffer? ReturnFlight { get; set; }
    [Parameter] public HotelData? Hotel { get; set; }
    [Parameter] public DateTime? DepartureDate { get; set; }
    [Parameter] public DateTime? ReturnDate { get; set; }
    [Parameter] public int Adults { get; set; }
    [Parameter] public EventCallback OnPackageCreated { get; set; }
    [Parameter] public string? PackageCreationMessage { get; set; }
    [Parameter] public bool PackageCreationSuccess { get; set; }
    [Parameter] public HotelOfferRootModel? HotelOffers { get; set; }

    private bool CanCreatePackage() =>
        OutboundFlight != null &&
        (!ReturnDate.HasValue || ReturnFlight != null) &&
        Hotel != null &&
        DepartureDate.HasValue;

    private decimal CalculateTotalPrice()
    {
        decimal total = 0;
        total += ConvertToEUR(OutboundFlight?.Price?.Total, OutboundFlight?.Price?.Currency);
        total += ConvertToEUR(ReturnFlight?.Price?.Total, ReturnFlight?.Price?.Currency);
        total += ConvertToEUR(Hotel?.Offers?.FirstOrDefault()?.Price?.Total,
                            Hotel?.Offers?.FirstOrDefault()?.Price?.Currency);
        return total;
    }

    private decimal ConvertToEUR(string? price, string? currency)
    {
        var raw = TryParsePrice(price);
        if (string.IsNullOrWhiteSpace(currency) || currency == "EUR") return raw;

        var conversion = HotelOffers?.Dictionaries?.CurrencyConversionLookupRates?.GetValueOrDefault(currency);
        if (conversion == null || conversion.Target != "EUR") return raw;

        if (decimal.TryParse(conversion.Rate, System.Globalization.NumberStyles.Any,
            System.Globalization.CultureInfo.InvariantCulture, out var rate))
        {
            return Math.Round(raw * rate, conversion.TargetDecimalPlaces);
        }

        return raw;
    }

    private decimal TryParsePrice(string? price)
    {
        return decimal.TryParse(price,
            System.Globalization.NumberStyles.Any,
            System.Globalization.CultureInfo.InvariantCulture,
            out var result)
            ? result
            : 0;
    }
}