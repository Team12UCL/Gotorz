@page "/"
@using Shared.Enums
@using Shared.Models
@using Client.Services
@rendermode InteractiveWebAssembly
@inject HttpClient HttpClient

<PageTitle>Create Travel Package</PageTitle>

<h3>Create Travel Package</h3>

<div class="booking-container">
	<!-- Top Row: Search Panel and Booking Summary -->
	<div class="top-row">
		<div class="search-panel-container">
			<SearchPanel @ref="searchPanel"
			OnSearchFlights="SearchFlights"
			OnSearchHotels="SearchHotels"
			OnSelectionChanged="HandleSelectionChange" />
		</div>

		<div class="search-summary-wrapper">
			<div class="summary-container">
				<BookingSummary OutboundFlight="selectedOutboundFlight"
				ReturnFlight="selectedReturnFlight"
				Hotel="selectedHotel"
				DepartureDate="departureDate"
				ReturnDate="returnDate"
				Adults="adults"
				OnPackageCreated="CreatePackage"
				PackageCreationMessage=@packageCreationMessage
				PackageCreationSuccess="packageCreationSuccess"
				HotelOffers="hotelOffers" />
			</div>
		</div>
	</div>

	<!-- Bottom Row: Results Panel -->
	<div class="results-container">
		<ResultsPanel CurrentSearchMode="currentSearchMode"
		OutboundFlights="outboundFlights"
		ReturnFlights="returnFlights"
		HotelData="hotels"
		SelectedOutboundFlight="selectedOutboundFlight"
		SelectedReturnFlight="selectedReturnFlight"
		SelectedHotel="selectedHotel"
		OnFlightSelected="@(tuple => SelectFlight(tuple.flight, tuple.isOutbound))"
		OnHotelSelected="SelectHotel"
		IsLoadingFlights="isLoadingFlights"
		IsLoadingHotels="isLoadingHotels"
		FlightError="flightError"
		HotelError="hotelError" />
	</div>
</div>

@code {
	// reference to the SearchPanel component for accessing its properties and methods directly
	private SearchPanel searchPanel;
	private SearchMode currentSearchMode = SearchMode.None;

	// Flight data
	private List<FlightOffer> outboundFlights = new();
	private List<FlightOffer> returnFlights = new();
	private FlightOffer? selectedOutboundFlight;
	private FlightOffer? selectedReturnFlight;

	// Hotel data
	private List<Hotel>? hotels;
	private HotelOffer? hotelOffers;
	private Hotel? selectedHotel;

	// Search parameters
	private DateTime? departureDate;
	private DateTime? returnDate;
	private int adults = 1;

	// UI states
	private bool isLoadingFlights = false;
	private bool isLoadingHotels = false;
	private bool flightError = false;
	private bool hotelError = false;
	private string packageCreationMessage = null;
	private bool packageCreationSuccess = false;

	private void HandleSelectionChange()
	{
		departureDate = searchPanel.DepartureDate;
		returnDate = searchPanel.ReturnDate;
		adults = searchPanel.Adults;
	}

	private void SelectFlight(FlightOffer flight, bool isOutbound)
	{
		if (isOutbound) selectedOutboundFlight = flight;
		else selectedReturnFlight = flight;
	}

	private void SelectHotel(Hotel hotel) => selectedHotel = hotel;

	private async Task SearchFlights()
	{
		if (!searchPanel.CanSearchFlights) return;

		// Fix for missing return flights on first search
		HandleSelectionChange();

		currentSearchMode = SearchMode.Flights;
		isLoadingFlights = true;
		flightError = false;

		try
		{
			outboundFlights = await searchPanel.FetchFlightData(isOutbound: true);
			if (returnDate.HasValue)
			{
				returnFlights = await searchPanel.FetchFlightData(isOutbound: false);
			}
			else
			{
				returnFlights = new List<FlightOffer>();
			}
		}
		catch
		{
			flightError = true;
		}
		finally
		{
			isLoadingFlights = false;
		}
	}

	private async Task SearchHotels()
	{
		if (!searchPanel.CanSearchHotels) return;

		HandleSelectionChange();

		currentSearchMode = SearchMode.Hotels;
		isLoadingHotels = true;
		hotelError = false;

		try
		{
			hotels = await searchPanel.FetchHotelData();
		}
		catch
		{
			hotelError = true;
		}
		finally
		{
			isLoadingHotels = false;
		}
	}

	private async Task CreatePackage()
	{
		try
		{
			var package = new TravelPackage
				{
					OutboundFlight = selectedOutboundFlight,
					OutboundFlightId = selectedOutboundFlight.Id,
					ReturnFlight = selectedReturnFlight,
					ReturnFlightId = selectedReturnFlight.Id,
					HotelId = selectedHotel.Id,
					Hotel = selectedHotel,
					DepartureDate = departureDate.Value,
					ReturnDate = returnDate ?? DateTime.MinValue,
					Adults = adults,
					OriginCity = searchPanel.OriginCityName,
					DestinationCity = searchPanel.DestinationCityName,
					//CreatedDate = DateTime.Now
				};

			// Extract currency conversion rates from hotelOffers to store with the new package (necessary since Packages.razor doesn't have hotel references which store the rates)
			// if (hotelOffers?.Dictionaries?.CurrencyConversionLookupRates != null)
			// {
			// 	foreach (var entry in hotelOffers.Dictionaries.CurrencyConversionLookupRates)
			// 	{
			// 		if (entry.Value.Target == "EUR" &&
			// 			decimal.TryParse(entry.Value.Rate,
			// 							System.Globalization.NumberStyles.Any,
			// 							System.Globalization.CultureInfo.InvariantCulture,
			// 							out var rate))
			// 		{
			// 			package.CurrencyConversionRates[entry.Key] = rate;
			// 		}
			// 	}
			// }

			//PackageService.Packages.Add(package);

			var result = await HttpClient.PostAsJsonAsync("api/travelpackage/create", package);

			if (!result.IsSuccessStatusCode)
			{
				// Handle error
				packageCreationMessage = "Failed to create package";
				packageCreationSuccess = false;
				return;
			}

			// Set success message
			packageCreationMessage = "Package created successfully!";
			packageCreationSuccess = true;

			// Reset selections
			selectedOutboundFlight = null;
			selectedReturnFlight = null;
			selectedHotel = null;
			currentSearchMode = SearchMode.None;

			// Auto-clear message after 5 seconds
			_ = ClearMessageAfterDelay();
		}
		catch (Exception ex)
		{
			// Set error message
			packageCreationMessage = $"Failed to create package"; // add logging with {ex.Message} ?
			packageCreationSuccess = false;

			// Auto-clear error after 8 seconds
			_ = ClearMessageAfterDelay(8000);
		}
	}

	private async Task ClearMessageAfterDelay(int delayMs = 5000)
	{
		await Task.Delay(delayMs);
		packageCreationMessage = null; 
		StateHasChanged();
	}
}