@page "/"
@using Shared.Models
@using Client.Services
@using System.Diagnostics
@using Shared.Models
@using Shared.Models.AmadeusCityResponse
@inject HttpClient HttpClient
@inject TravelPackageService PackageService
@rendermode InteractiveWebAssembly
@inject ILogger<Home> Logger

<PageTitle>Create Travel Package</PageTitle>

<h3>Create Travel Package</h3>

<div class="booking-container">
	<!-- Main search and results area -->
	<div class="search-results-area">
		<!-- Search panel -->
		<div class="search-panel">
			<!-- Departure Search -->
			<div class="autocomplete-container">
				<label for="origin">Origin:</label>
				<input type="text" @bind="originSearchQuery" @oninput="e => OnSearchQueryChanged(e, true, false)" id="origin" placeholder="Enter origin airport" class="autocomplete-input" />
				<div class="autocomplete-dropdown" style="display: @(originAirportSuggestions.Any() ? "block" : "none")">
					@foreach (var airport in originAirportSuggestions)
					{
						<div class="autocomplete-item" @onclick="() => SetAirport(ref originLocationCode, ref originSearchQuery, originAirportSuggestions, airport)">@airport.Country - @airport.Name (@airport.IataCode)</div>
					}
				</div>
			</div>
			<!-- Destination Search -->
			<div class="autocomplete-container">
				<label for="destination">Destination:</label>
				<input type="text" @bind="destinationSearchQuery" @oninput="e => OnSearchQueryChanged(e, false, false)" id="destination" placeholder="Enter destination airport" class="autocomplete-input" />
				<div class="autocomplete-dropdown" style="display: @(destinationAirportSuggestions.Any() ? "block" : "none")">
					@foreach (var airport in destinationAirportSuggestions)
					{
						<div class="autocomplete-item" @onclick="() => SetAirport(ref destinationLocationCode, ref destinationSearchQuery, destinationAirportSuggestions, airport)">@airport.Country - @airport.Name (@airport.IataCode)</div>
					}
				</div>
			</div>
			<!-- City Search -->
			<div class="autocomplete-container">
				<label for="city">City:</label>
				<input type="text" @bind="hotelCitySearch" @oninput="e => OnSearchQueryChanged(e, false, true)" id="city" placeholder="Enter city" class="autocomplete-input" />
				<div class="autocomplete-dropdown" style="display: @(destinationHotelCitySuggestions.Any() ? "block" : "none")">
					@foreach (var city in destinationHotelCitySuggestions)
					{
						<div class="autocomplete-item" @onclick="() => SetHotel(ref hotelCitySearch, destinationHotelCitySuggestions, city)">
							@city.Name (@city.Address.CountryCode)
						</div>
					}
				</div>
			</div>
			<!-- Dates and Adults Options -->
			<div class="form-container">
				<div>
					<label for="departureDate">Departure Date:</label>
					<input type="date" @bind="departureDate" id="departureDate" min="@minDepartureDate" />
				</div>
				<div>
					<label for="returnDate">Return Date:</label>
					<input type="date" @bind="returnDate" id="returnDate" min="@minReturnDate" />
				</div>
				<div>
					<label for="adults">Number of Adults:</label>
					<input type="number" @bind="adults" id="adults" min="1" max="10" />
				</div>
			</div>

			<!-- Search Buttons -->
			<div class="action-buttons">
				<button @onclick="SearchFlights" disabled="@(!CanSearchFlights() || @isSearchingFlights)">
					<span>@(isSearchingFlights ? "Searching..." : "Search Flights")</span>
				</button>
				<button @onclick="SearchHotels" disabled="@(!CanSearchHotels() || @isSearchingHotels)">
					<span>@(isSearchingHotels ? "Searching..." : "Search Hotels")</span>
				</button>
			</div>

			@if (searchError)
			{
				<div class="error-message">
					Please fill in all required fields: Origin, Destination, City, and Dates.
				</div>
			}
		</div>

		<!-- Results area (Flights or Hotels) -->
		<div class="results-area">
			@if (currentSearchMode == SearchMode.Flights)
			{
				<div class="flight-results">
					<!-- Outbound Flights -->
					<div class="outbound-flights">
						<h4>✈️ Outbound Flights</h4>
						@if (isLoadingFlights)
						{
							<div class="loading-container">
								<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
								<p>Searching for outbound flights...</p>
							</div>
						}
						else if (outboundFlights.Count() == 0)
						{
							<div class="error-message">
								No flight offers found. Please change your search.
							</div>
						}
						else if (flightError)
						{
							<div class="error-message">
								Error loading flight data. Please try again.
							</div>
						}
						else if (outboundFlights?.Any() == true)
						{
							<table class="results-table">
								<thead>
									<tr>
										<th></th>
										<th>Carrier</th>
										<th>Duration</th>
										<th>Price</th>
										<th>Route</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var flight in outboundFlights)
									{
										<tr class="@(selectedOutboundFlight == flight ? "selected-row" : "")">
											<td>
												<input type="radio" name="outboundFlight" value="@flight"
												@onchange="@(() => SelectOutboundFlight(flight))"
												checked="@(selectedOutboundFlight == flight)" />
											</td>
											<td>@flight.Itineraries[0].Segments[0].CarrierCode</td>
											<td>@flight.Itineraries[0].Duration.Replace("PT", "")</td>
											<td>@flight.Price.Currency @flight.Price.Total</td>
											<td>
												@foreach (var segment in flight.Itineraries[0].Segments)
												{
													<div>
														@segment.Departure.IataCode at @segment.Departure.At.ToString("HH:mm (yyyy-MM-dd)") <br>
														➝ @segment.Arrival.IataCode at @segment.Arrival.At.ToString("HH:mm (yyyy-MM-dd)")
													</div>
												}
											</td>
										</tr>
									}
								</tbody>
							</table>
						}
						else
						{
							<p>No outbound flight offers available.</p>
						}
					</div>

					<!-- Return Flights -->
					<div class="return-flights">
						<h4>✈️ Return Flights</h4>
						@if (isLoadingFlights)
						{
							<div class="loading-container">
								<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
								<p>Searching for return flights...</p>
							</div>
						}
						else if (returnFlights.Count() == 0)
						{
							<div class="error-message">
								No flight offers found. Please change your search.
							</div>
						}
						else if (flightError)
						{
							<div class="error-message">
								Error loading flight data. Please try again.
							</div>
						}
						else if (returnFlights?.Any() == true)
						{
							<table class="results-table">
								<thead>
									<tr>
										<th></th>
										<th>Carrier</th>
										<th>Duration</th>
										<th>Price</th>
										<th>Route</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var flight in returnFlights)
									{
										<tr class="@(selectedReturnFlight == flight ? "selected-row" : "")">
											<td>
												<input type="radio" name="returnFlight" value="@flight"
												@onchange="@(() => SelectReturnFlight(flight))"
												checked="@(selectedReturnFlight == flight)" />
											</td>
											<td>@flight.Itineraries[0].Segments[0].CarrierCode</td>
											<td>@flight.Itineraries[0].Duration.Replace("PT", "")</td>
											<td>@flight.Price.Currency @flight.Price.Total</td>
											<td>
												@foreach (var segment in flight.Itineraries[0].Segments)
												{
													<div>
														@segment.Departure.IataCode at @segment.Departure.At.ToString("HH:mm (yyyy-MM-dd)") <br>
														➝ @segment.Arrival.IataCode at @segment.Arrival.At.ToString("HH:mm (yyyy-MM-dd)")
													</div>
												}
											</td>
										</tr>
									}
								</tbody>
							</table>
						}
						else if (!isLoadingFlights && returnDate.HasValue)
						{
							<p>No return flight offers available.</p>
						}
						else if (!returnDate.HasValue)
						{
							<p>One-way trip selected (no return date).</p>
						}
					</div>
				</div>
			}
			else if (currentSearchMode == SearchMode.Hotels)
			{
				<div class="hotel-results">
					<h4>🏨 Available Hotels</h4>
					@if (isLoadingHotels)
					{
						<div class="loading-container">
							<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
							<p>Searching for hotels...</p>
						</div>
					}
					else if (hotelOffers?.Data.Count() == 0)
					{
						<div class="error-message">
							No hotel offers found. Please change your search.
						</div>
					}
					else if (hotelError)
					{
						<div class="error-message">
							Error loading hotel data. Please try again.
						</div>
					}
					else if (hotelOffers?.Data?.Any() == true)
					{
						<table class="results-table">
							<thead>
								<tr>
									<th></th>
									<th>Hotel Name</th>
									<th>Price</th>
									<th>Details</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var hotel in hotelOffers.Data)
								{
									<tr class="@(selectedHotel == hotel ? "selected-row" : "")">
										<td>
											<input type="radio" name="hotel" value="@hotel"
											@onchange="@(() => SelectHotel(hotel))"
											checked="@(selectedHotel == hotel)" />
										</td>
										<td>
											<strong>
												<a href="https://www.google.com/search?q=@Uri.EscapeDataString(hotel.Hotel.Name)" target="_blank">
													@hotel.Hotel.Name
												</a>
											</strong>
										</td>
										@{
											var offer = hotel.Offers?.FirstOrDefault();
											var converted = ConvertToEUR(offer?.Price?.Total, offer?.Price?.Currency);
										}
										@converted EUR
										<td>
											@if (hotel.Offers?.FirstOrDefault()?.BoardType != null)
											{
												<div>Board: @hotel.Offers.FirstOrDefault().BoardType</div>
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
					else
					{
						<p>No hotel offers available.</p>
					}
				</div>
			}
		</div>
	</div>

	<!-- Booking Summary Panel -->
	<div class="booking-summary">
		<h4>Booking Summary</h4>
		<div class="summary-content">
			@if (selectedOutboundFlight != null || selectedReturnFlight != null || selectedHotel != null)
			{
				<div class="summary-section">
					<h5>Selected Flights</h5>
					@if (selectedOutboundFlight != null)
					{
						<div class="summary-item">
							<strong>Outbound:</strong> @selectedOutboundFlight.Itineraries[0].Segments[0].Departure.IataCode to
							@selectedOutboundFlight.Itineraries[0].Segments[^1].Arrival.IataCode
							<div class="summary-detail">
								<span>Departs: @selectedOutboundFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
								<span>@selectedOutboundFlight.Price.Total @selectedOutboundFlight.Price.Currency</span>
							</div>
						</div>
					}

					@if (selectedReturnFlight != null)
					{
						<div class="summary-item">
							<strong>Return:</strong> @selectedReturnFlight.Itineraries[0].Segments[0].Departure.IataCode to
							@selectedReturnFlight.Itineraries[0].Segments[^1].Arrival.IataCode
							<div class="summary-detail">
								<span>Departs: @selectedReturnFlight.Itineraries[0].Segments[0].Departure.At.ToString("HH:mm (yyyy-MM-dd)")</span>
								<span>@selectedReturnFlight.Price.Total @selectedReturnFlight.Price.Currency</span>
							</div>
						</div>
					}
				</div>

				@if (selectedHotel != null)
				{
					<div class="summary-section">
						<h5>Selected Hotel</h5>
						<div class="summary-item">
							<strong>@selectedHotel.Hotel.Name</strong>
							<div class="summary-detail">
								<span>Period: @selectedHotel.Offers?.FirstOrDefault()?.CheckInDate to @selectedHotel.Offers?.FirstOrDefault()?.CheckOutDate</span>
								<span>@ConvertToEUR(selectedHotel.Offers?.FirstOrDefault()?.Price?.Total, selectedHotel.Offers?.FirstOrDefault()?.Price?.Currency) EUR</span>
							</div>
						</div>
					</div>
				}

				@if (CalculateTotalPrice() > 0)
				{
					<div class="summary-total">
						<strong>Total Price:</strong> @CalculateTotalPrice() EUR
					</div>
				}

				<button class="summary-button" @onclick="CreatePackage" disabled="@(!CanCreatePackage())">
					Complete Package
				</button>
			}
			else
			{
				<p>No items selected yet</p>
				<p class="hint-text">Select flights first, then accommodations to complete the package.</p>
			}
		</div>
		@if (!string.IsNullOrEmpty(packageCreationMessage))
		{
			<div class="@(packageCreationSuccess ? "success-message" : "error-message")">
				@packageCreationMessage
			</div>
		}
	</div>
</div>

@code {
	private enum SearchMode { None, Flights, Hotels }
	private SearchMode currentSearchMode = SearchMode.None;

	// Data models
	private List<FlightOffer> outboundFlights = new();
	private List<FlightOffer> returnFlights = new();
	private FlightOffer? selectedOutboundFlight;
	private FlightOffer? selectedReturnFlight;

	private HotelOfferRootModel? hotelOffers;
	private HotelData? selectedHotel;

	// Search parameters
	private string originSearchQuery = "";
	private string destinationSearchQuery = "";
	private string originLocationCode = "";
	private string destinationLocationCode = "";
	private string destinationCityCode = "";
	private string hotelCitySearch = "";
	private string originCityName = "";
	private string destinationCityName = "";
	private DateTime? departureDate;
	private DateTime? returnDate;
	private string minDepartureDate = DateTime.Now.ToString("yyyy-MM-dd");
	private string minReturnDate => ((departureDate ?? DateTime.Now).AddDays(1)).ToString("yyyy-MM-dd");
	private int adults = 1;

	// UI states
	private List<Airport> originAirportSuggestions = new();
	private List<Airport> destinationAirportSuggestions = new();
	private List<CityData> destinationHotelCitySuggestions = new();

	// Sets whether user is searching via raw input or via autocomplete (necessary check for city code conversion for raw input)
	private bool isUsingAutocomplete = false;
	// Controls the loading indicator while flight data is being fetched from the API
	private bool isLoadingFlights = false;
	// Controls the loading indicator while hotel data is being fetched from the API
	private bool isLoadingHotels = false;
	// Tracks if a flight search operation is in progress to disable the search button
	private bool isSearchingFlights = false;
	// Tracks if a hotel search operation is in progress to disable the search button
	private bool isSearchingHotels = false;
	// Indicates if an error occurred during flight data retrieval
	private bool flightError = false;
	// Indicates if an error occurred during hotel data retrieval
	private bool hotelError = false;
	// Indicates if the search form has validation errors (missing required fields)
	private bool searchError = false;
	// Indicates if an error occurred during package creation
	private string packageCreationMessage;
	// Indicates if the package creation was successful
	private bool packageCreationSuccess;
	// Timer for displaying messages a limited time (e.g., success or error messages)
	private Timer _messageTimer;
	// Store the timer ID for debouncing
	private Timer _debounceTimer;

	// private bool CanSearchFlights() => true; Maybe set bools for only using auto-complete suggestions, disable direct input?
	private bool CanSearchFlights() =>
		isUsingAutocomplete &&
		!string.IsNullOrWhiteSpace(originLocationCode) &&
		!string.IsNullOrWhiteSpace(destinationLocationCode) &&
		departureDate.HasValue &&
		(!returnDate.HasValue || returnDate > departureDate);

	private bool CanSearchHotels() => true; // Can extend this if needed for specific validation

	private bool CanCreatePackage() =>
		selectedOutboundFlight != null &&
		(!returnDate.HasValue || selectedReturnFlight != null) &&
		selectedHotel != null &&
		departureDate.HasValue;

	private decimal CalculateTotalPrice()
	{
		decimal total = 0;
		total += ConvertToEUR(selectedOutboundFlight?.Price?.Total, selectedOutboundFlight?.Price?.Currency);
		total += ConvertToEUR(selectedReturnFlight?.Price?.Total, selectedReturnFlight?.Price?.Currency);
		total += ConvertToEUR(selectedHotel?.Offers?.FirstOrDefault()?.Price?.Total,
									selectedHotel?.Offers?.FirstOrDefault()?.Price?.Currency);
		return total;
	}

	private decimal ConvertToEUR(string? price, string? currency)
	{
		var raw = TryParsePrice(price);
		Logger.LogWarning("Raw price: {Raw}, Original currency: {Currency}", raw, currency);

		if (string.IsNullOrWhiteSpace(currency) || currency == "EUR")
		{
			Logger.LogWarning("Currency is EUR or not provided, returning raw price.");
			return raw;
		}

		var conversion = hotelOffers?.Dictionaries?.CurrencyConversionLookupRates?.GetValueOrDefault(currency);
		if (conversion == null)
		{
			Logger.LogWarning("No conversion rate found for currency: {Currency}", currency);
			return raw;
		}

		Logger.LogWarning("Found conversion rate: {Rate} (Target: {Target}, Decimals: {Decimals})",
			conversion.Rate, conversion.Target, conversion.TargetDecimalPlaces);

		if (conversion.Target == "EUR" &&
			decimal.TryParse(conversion.Rate, System.Globalization.NumberStyles.Any,
				System.Globalization.CultureInfo.InvariantCulture, out var rate))
		{
			var converted = Math.Round(raw * rate, conversion.TargetDecimalPlaces);
			Logger.LogWarning("Converted price: {Converted}", converted);
			return converted;
		}

		Logger.LogWarning("Conversion failed or target not EUR, returning raw price.");
		return raw;
	}



	private decimal TryParsePrice(string? price)
	{
		return decimal.TryParse(price,
			System.Globalization.NumberStyles.Any,
			System.Globalization.CultureInfo.InvariantCulture,
			out var result)
			? result
			: 0;
	}

	// Finds airport suggestions for origin or destination based on user input
	private async Task OnSearchQueryChanged(ChangeEventArgs e, bool isOrigin, bool isHotel)
	{
		var query = e.Value?.ToString() ?? "";
		isUsingAutocomplete = false;

		// Minimum character length before triggering search (e.g., 3 characters)
		const int minimumCharacters = 3;

		// Cancel previous timer (debouncing) to prevent multiple fast API calls
		_debounceTimer?.Dispose();

		if (query.Length >= minimumCharacters)
		{
			// Set a delay of 500ms before calling the fetch function
			_debounceTimer = new Timer(async _ =>
			{
				try
				{
					if (isHotel)
					{
						hotelCitySearch = query;
						destinationHotelCitySuggestions = await FetchHotelCitySuggestions(query);
					}
					else if (isOrigin)
					{
						originSearchQuery = query;
						originAirportSuggestions = await FetchAirportSuggestions(query);
					}
					else
					{
						destinationSearchQuery = query;
						destinationAirportSuggestions = await FetchAirportSuggestions(query);
					}
				}
				catch (Exception ex)
				{
					Logger.LogError($"Error fetching suggestions: {ex.Message}");
					// Clear suggestions to avoid showing stale data
					if (isHotel)
						destinationHotelCitySuggestions = new List<CityData>();
					else if (isOrigin)
						originAirportSuggestions = new List<Airport>();
					else
						destinationAirportSuggestions = new List<Airport>();
				}

				// Update UI (force UI re-render if needed)
				await InvokeAsync(StateHasChanged);
			}, null, 500, Timeout.Infinite); // 500ms debounce
		}
	}

	// Fetches airport suggestions based on the user's input
	private async Task<List<Airport>> FetchAirportSuggestions(string query)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(query))
				return new List<Airport>();

			return await HttpClient.GetFromJsonAsync<List<Airport>>($"api/airport/suggest-airports?query={query}")
				?? new List<Airport>();
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error fetching airport suggestions for '{query}': {ex.Message}");
			return new List<Airport>();
		}
	}

	private async Task<List<CityData>> FetchHotelCitySuggestions(string query)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(query))
				return new List<CityData>();

			return await HttpClient.GetFromJsonAsync<List<CityData>>($"api/hotel/suggest-cities?query={query}")
				?? new List<CityData>();
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error fetching city suggestions for '{query}': {ex.Message}");
			return new List<CityData>();
		}
	}

	private void SetAirport(ref string locationCode, ref string searchQuery, List<Airport> suggestions, Airport airport)
	{
		isUsingAutocomplete = true;
		locationCode = airport.IataCode;
		searchQuery = $"{airport.Country} - {airport.Name} ({airport.IataCode})";

		//gemmer bynavne
		if (locationCode == originLocationCode)
			originCityName = airport.City ?? airport.Country;
		else if (locationCode == destinationLocationCode)
			destinationCityName = airport.City ?? airport.Country;

		suggestions.Clear();
	}

	private void SetHotel(ref string hotelCitySearch, List<CityData> suggestions, CityData city)
	{
		isUsingAutocomplete = true;
		hotelCitySearch = $"{city.Name} ({city.Address.CountryCode})";
		destinationCityCode = city.IataCode;
		suggestions.Clear();
	}

	// Selectors set the selected flight or hotel from results
	private void SelectOutboundFlight(FlightOffer flight) => selectedOutboundFlight = flight;
	private void SelectReturnFlight(FlightOffer flight) => selectedReturnFlight = flight;
	private void SelectHotel(HotelData hotel) => selectedHotel = hotel;

	// Search functions for flights and hotels with validation and SearchMode
	private async Task SearchFlights()
	{
		if (string.IsNullOrWhiteSpace(originLocationCode) || string.IsNullOrWhiteSpace(destinationLocationCode) || !departureDate.HasValue)
		{
			searchError = true;
			return;
		}

		searchError = false;
		flightError = false;
		currentSearchMode = SearchMode.Flights;
		isSearchingFlights = true;

		try
		{
			await FetchFlightData();
		}
		finally
		{
			isSearchingFlights = false;
		}
	}

	private async Task SearchHotels()
	{

		// if user is searching via raw input, their input needs conversion to city code for the API call, else we get the city code directly from the selected autocomplete hotel object
		if (isUsingAutocomplete == false)
		{
			await SetDestinationCityCodeFromCityName();
		}
		
		if (string.IsNullOrWhiteSpace(destinationCityCode) || !departureDate.HasValue)
		{
			searchError = true;
			return;
		}

		searchError = false;
		hotelError = false;
		currentSearchMode = SearchMode.Hotels;
		isSearchingHotels = true;

		try
		{
			await FetchHotelData();

			if (hotelOffers?.Data == null || !hotelOffers.Data.Any())
			{
				hotelOffers = new HotelOfferRootModel { Data = new List<HotelData>() };
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error searching hotels: {ex.Message}");
			hotelError = true;
		}
		finally
		{
			isSearchingHotels = false;
			await InvokeAsync(StateHasChanged); // Force UI update
		}
	}

	private async Task FetchFlightData()
	{
		isLoadingFlights = true;
		flightError = false;
		outboundFlights.Clear();
		returnFlights.Clear();

		try
		{
			Logger.LogInformation($"Fetching flights from {originLocationCode} to {destinationLocationCode} on {departureDate}");
			var outboundUrl = $"api/flight/search?originLocationCode={originLocationCode}&destinationLocationCode={destinationLocationCode}&departureDate={departureDate:yyyy-MM-dd}&adults={adults}";
			outboundFlights = (await HttpClient.GetFromJsonAsync<FlightOfferRootModel>(outboundUrl))?.Data ?? new List<FlightOffer>();

			if (returnDate.HasValue)
			{
				Logger.LogInformation($"Fetching return flights from {destinationLocationCode} to {originLocationCode} on {returnDate}");
				var returnUrl = $"api/flight/search?originLocationCode={destinationLocationCode}&destinationLocationCode={originLocationCode}&departureDate={returnDate:yyyy-MM-dd}&adults={adults}";
				returnFlights = (await HttpClient.GetFromJsonAsync<FlightOfferRootModel>(returnUrl))?.Data ?? new List<FlightOffer>();
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error fetching flight offers: {ex.Message}");
			flightError = true;
		}
		finally
		{
			isLoadingFlights = false;
		}
	}

	private async Task FetchHotelData()
	{
		isLoadingHotels = true;
		hotelError = false;

		Logger.LogInformation($"Fetching hotels in {destinationCityCode}");

		await InvokeAsync(StateHasChanged);

		try
		{
			var checkInDate = departureDate?.ToString("yyyy-MM-dd") ?? "";
			var checkOutDate = returnDate?.ToString("yyyy-MM-dd") ?? "";

			hotelOffers = await HttpClient.GetFromJsonAsync<HotelOfferRootModel>(
				$"api/hotel/search?cityCode={destinationCityCode}&departureDate={departureDate:yyyy-MM-dd}&checkInDate={checkInDate}&checkOutDate={checkOutDate}&adults={adults}");
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error fetching hotel offers: {ex.Message}");
			hotelError = true;
			hotelOffers = new HotelOfferRootModel { Data = new List<HotelData>() };
		}
		finally
		{
			isLoadingHotels = false;
		}
	}

	private void CreatePackage()
	{
		try
		{
			var package = new TravelPackage
				{
					OutboundFlight = selectedOutboundFlight,
					ReturnFlight = selectedReturnFlight, // May be null for one-way tripss
					Hotel = selectedHotel,
					DepartureDate = departureDate.Value,
					ReturnDate = returnDate ?? DateTime.MinValue,
					Adults = adults,
					OriginCity = originCityName,
					DestinationCity = destinationCityName
				};

			PackageService.Packages.Add(package);

			packageCreationMessage = "Success! Your travel package has been created.";
			packageCreationSuccess = true;

			// Reset selections
			selectedOutboundFlight = null;
			selectedReturnFlight = null;
			selectedHotel = null;

			currentSearchMode = SearchMode.None;

			// Set a timer to clear the message after a few seconds
			_messageTimer?.Dispose();
			_messageTimer = new Timer(_ =>
			{
				packageCreationMessage = null;
				InvokeAsync(StateHasChanged);
			}, null, 5000, Timeout.Infinite); // Clear after 5 seconds
		}
		catch (Exception ex)
		{
			packageCreationMessage = "Error creating package. Please try again.";
			packageCreationSuccess = false;
			Logger.LogError($"Error creating package: {ex.Message}");
		}
	}

private async Task SetDestinationCityCodeFromCityName()
{
    Logger.LogInformation("Converting to city code from city name: " + hotelCitySearch);

    if (!string.IsNullOrWhiteSpace(hotelCitySearch))
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<CityCodeResponse>($"api/hotel/get-city-code?cityName={hotelCitySearch}");
            if (response != null && !string.IsNullOrWhiteSpace(response.CityCode))
            {
                Logger.LogInformation("Converted to " + response.CityCode);
                destinationCityCode = response.CityCode;
            }
            else
            {
                Logger.LogWarning($"No city code found for: {hotelCitySearch}");
                hotelError = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error converting city name to code: {ex.Message}");
            hotelError = true;
            destinationCityCode = string.Empty; // Reset to prevent using invalid data
        }
    }
}



}

<style>
	/* Layout */
	.booking-container {
		display: flex;
		gap: 20px;
	}

	.search-results-area {
		flex: 3;
		display: flex;
		flex-direction: column;
	}

	.booking-summary {
		flex: 1;
		background-color: #f9f9f9;
		border-radius: 8px;
		padding: 15px;
		border: 1px solid #ddd;
		height: fit-content;
		position: sticky;
		top: 60px;
	}

	.flight-results {
		display: flex;
		gap: 20px;
	}

	.outbound-flights, .return-flights {
		flex: 1;
	}

	/* Form elements */
	.search-panel {
		background-color: #f4f4f4;
		padding: 15px;
		border-radius: 8px;
		margin-bottom: 20px;
	}

	.action-buttons {
		display: flex;
		gap: 10px;
		margin-top: 10px;
	}

	.form-container {
		display: flex;
		justify-content: space-between;
		gap: 20px;
	}

		.form-container div {
			display: flex;
			flex-direction: column;
			flex-grow: 1;
		}

	/* Autocomplete styling */
	.autocomplete-container {
		position: relative;
		margin-bottom: 15px;
	}

	.success-message {
		background-color: #dff0d8;
		color: #3c763d;
		padding: 10px;
		margin: 10px 0;
		border-radius: 4px;
		border: 1px solid #d6e9c6;
	}

	.error-message {
		background-color: #f2dede;
		color: #a94442;
		padding: 10px;
		margin: 10px 0;
		border-radius: 4px;
		border: 1px solid #ebccd1;
	}

</style>
