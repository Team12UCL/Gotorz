@page "/"
@using Shared.Models
@using Shared.Models.AmadeusCityResponse
@using Gotorz.Client.Services
@inject PricingService PricingService
@rendermode InteractiveWebAssembly
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Packages> _logger

<h3>Find din rejse</h3>

<!-- Filter Section -->
<div class="form-container search-panel">
	<div>
		<label>Fly from</label>
		<input placeholder="e.g Copenhagen" @bind="originCityFilter" @oninput="OnOriginCityChanged" />
	</div>
	<div>
		<label>Destination</label>
		<input placeholder="e.g Paris" @bind="destinationCityFilter"/>
	</div>
	<div>
		<label>When</label>
		<input type="date" @bind="departureDate" />
	</div>
	<div>
		<label>Return</label>
		<input type="date" @bind="returnDate" />
	</div>
	<div>
		<label>Date Range</label>
		<select @bind="dateFlexibilityDays">
			<option value="0">Exact date</option>
			<option value="3">± 3 days</option>
			<option value="7">± 1 week</option>
			<option value="30">± 1 month</option>
		</select>
	</div>

	<div>
		<label>Adults</label>
		<select @bind="adults">
			@for (int i = 1; i <= 10; i++)
			{
				<option value="@i">@i</option>
			}
		</select>
	</div>

	<div>
		<label>Children</label>
		<select @bind="children">
			@for (int i = 0; i <= 10; i++)
			{
				<option value="@i">@i</option>
			}
		</select>
	</div>
</div>


@if (FilteredPackages?.Count() > 0)
{

	<p>@FilteredPackages.Count() packages found:</p>


	<!-- Show Packages -->
	@foreach (var pkg in FilteredPackages)
	{
		<div class="package-card">
			<strong>From:</strong> @pkg.OriginCity <br />
			<strong>Destination:</strong> @pkg.DestinationCity <br />
			<strong>Dates:</strong> @pkg.DepartureDate.ToString("yyyy-MM-dd")
			→ @pkg.ReturnDate.ToString("yyyy-MM-dd") <br />
			<strong>Price:</strong>
			@{
				var offer = pkg.Hotel?.Offers?.FirstOrDefault(); 
				if (offer == null && pkg.Hotel != null)
				{
					_logger.LogCritical($"No hotel offer found for hotel ID: {pkg.Hotel.Id}");
				}

				var price = PricingService.CalculateTotalPriceWithPassengers(
				pkg.OutboundFlight,
				pkg.ReturnFlight,
				pkg.Hotel,
				offer,
				adults,
				children
				);
			}
			@price EUR		<br />
			<button class="summary-button"
			@onclick="() => GoToBooking(pkg)">
				
				Book
				</button>
		</div>
	}
}


@code {
	private DateTime? departureDate;
	private DateTime? returnDate;
	private string? originFilter;
	private string? destinationFilter;
	private string? originCityFilter;
	private string? destinationCityFilter;
	// private int travelers = 1;
	private int adults = 1;
	private int children = 0;
	private int dateFlexibilityDays = 0;

	private List<TravelPackage>? travelPackages = new();
	private TravelPackage? selectedPackage;

	private string errorMessage;
	private bool isLoading = false;



	protected override async Task OnInitializedAsync()
	{
		try
		{
			isLoading = true;
			travelPackages = await HttpClient.GetFromJsonAsync<List<TravelPackage>>("api/travelpackage");
		}
		catch (Exception ex)
		{
			errorMessage = $"Failed to load travel packages: {ex.Message}";
		}
		finally
		{
			isLoading = false;
		}
	}


	<!-- Filter Logic -->
	private IEnumerable<TravelPackage>? FilteredPackages =>

	travelPackages.Where(p =>
		(!departureDate.HasValue ||
	(p.DepartureDate >= departureDate.Value.AddDays(-dateFlexibilityDays) &&
		p.DepartureDate <= departureDate.Value.AddDays(dateFlexibilityDays))) &&

	(!returnDate.HasValue ||
	(p.ReturnDate >= returnDate.Value.AddDays(-dateFlexibilityDays) &&
		p.ReturnDate <= returnDate.Value.AddDays(dateFlexibilityDays)))
	&&
		(string.IsNullOrWhiteSpace(originCityFilter) ||
			p.OriginCity?.Contains(originCityFilter, StringComparison.OrdinalIgnoreCase) == true) &&
		(string.IsNullOrWhiteSpace(destinationCityFilter) ||
			p.DestinationCity?.Contains(destinationCityFilter, StringComparison.OrdinalIgnoreCase) == true)
	);

	private void OnOriginCityChanged(ChangeEventArgs e)
	{
		originCityFilter = e.Value?.ToString();
		
	}

	// private decimal CalculatePackagePrice(TravelPackage pkg)
	// {
	// 	decimal total = 0;
	// 	total += TryParsePrice(pkg.OutboundFlight?.TotalPrice.ToString());
	// 	total += TryParsePrice(pkg.ReturnFlight?.TotalPrice.ToString());
	// 	total += TryParsePrice(pkg.Hotel?.Offers?.FirstOrDefault()?.TotalPrice.ToString());
	// 	return total;
	// }

	// private decimal TryParsePrice(string? price)
	// {
	// 	return decimal.TryParse(price,
	// 		System.Globalization.NumberStyles.Any,
	// 		System.Globalization.CultureInfo.InvariantCulture,
	// 		out var result)
	// 		? result
	// 		: 0;
	// }

	private async Task GoToBooking(TravelPackage pkg)
	{
		//Get authentication state to check if user is logged in
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
		
		if (isAuthenticated) //If logged in -> /BookingDetails
		{
			NavManager.NavigateTo($"/bookingdetails/{pkg.TravelPackageId}?adults={adults}&children={children}");
		}
		else // else -> go to login with /bookingdetails as returnUrl
		{
			NavManager.NavigateTo($"/Account/Login?returnUrl=/bookingdetails/{pkg.TravelPackageId}?adults={adults}&children={children}");
		}
	}

}

<style>
	/* Layout */
	.booking-container {
		display: flex;
		gap: 20px;
	}

	.search-results-area {
		flex: 3;
		display: flex;
		flex-direction: column;
	}

	.booking-summary {
		flex: 1;
		background-color: #f9f9f9;
		border-radius: 8px;
		padding: 15px;
		border: 1px solid #ddd;
		height: fit-content;
		position: sticky;
		top: 60px;
	}

	.flight-results {
		display: flex;
		gap: 20px;
	}

	.outbound-flights, .return-flights {
		flex: 1;
	}

	/* Form elements */
	.search-panel {
		background-color: #f4f4f4;
		padding: 15px;
		border-radius: 8px;
		margin-bottom: 20px;
	}

	.action-buttons {
		display: flex;
		gap: 10px;
		margin-top: 10px;
	}

	.form-container {
		display: flex;
		justify-content: space-between;
		gap: 20px;
	}

		.form-container div {
			display: flex;
			flex-direction: column;
			flex-grow: 1;
		}

	/* Autocomplete styling */
	.autocomplete-container {
		position: relative;
		margin-bottom: 15px;
	}

	.autocomplete-input {
		width: 100%;
		padding: 8px;
		border: 1px solid #ccc;
		border-radius: 4px;
	}

	.autocomplete-dropdown {
		position: absolute;
		background-color: white;
		border: 1px solid #ccc;
		border-top: none;
		width: 100%;
		max-height: 200px;
		overflow-y: auto;
		box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
		z-index: 1000;
	}

	.autocomplete-item {
		padding: 8px;
		cursor: pointer;
	}

		.autocomplete-item:hover {
			background-color: #f1f1f1;
		}

	/* Input styles */
	input[type="date"], input[type="number"], input[type="text"] {
		padding: 8px;
		border: 1px solid #ccc;
		border-radius: 4px;
		width: 100%;
	}

	label {
		font-weight: bold;
		display: block;
		margin-bottom: 5px;
	}

	/* Button styles */
	button {
		background-color: #4CAF50;
		color: white;
		padding: 10px 15px;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		font-size: 16px;
		transition: background-color 0.3s;
	}

		button:hover:not(:disabled) {
			background-color: #45a049;
		}

		button:disabled {
			background-color: #cccccc;
			cursor: not-allowed;
		}

	/* Results table */
	.results-table {
		width: 100%;
		border-collapse: collapse;
		margin-top: 10px;
	}

		.results-table th, .results-table td {
			padding: 8px;
			text-align: left;
			border-bottom: 1px solid #ddd;
		}

		.results-table th {
			background-color: #f4f4f4;
			font-weight: bold;
		}

		.results-table tr:hover {
			background-color: #f9f9f9;
		}

	.selected-row {
		background-color: #e7f3e8;
	}

	/* Summary panel styles */
	.summary-content {
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	.summary-section {
		border-bottom: 1px solid #ddd;
		padding-bottom: 10px;
	}

		.summary-section h5 {
			margin-top: 0;
			margin-bottom: 10px;
			color: #333;
		}

	.summary-item {
		padding: 8px;
		background-color: #fff;
		border-radius: 4px;
		margin-bottom: 5px;
	}

	.summary-detail {
		display: flex;
		justify-content: space-between;
		font-size: 0.9em;
		color: #666;
		margin-top: 5px;
	}

	.summary-total {
		font-size: 1.2em;
		text-align: right;
		padding: 10px 0;
	}

	.summary-button {
		background-color: #007bff;
		width: 100%;
	}

		.summary-button:hover:not(:disabled) {
			background-color: #0056b3;
		}

	.hint-text {
		color: #666;
		font-style: italic;
		font-size: 0.9em;
	}

	.package-card {
		max-width: 400px;
		margin: 0 auto 15px auto;
		border: 1px solid #ccc;
		padding: 15px;
		border-radius: 8px;
		box-shadow: 0 2px 6px rgba(0,0,0,0.05);
		background-color: white;
	}

	/* Error styles */
	.error-message {
		color: #721c24;
		background-color: #f8d7da;
		border: 1px solid #f5c6cb;
		padding: 10px;
		border-radius: 4px;
		margin-top: 10px;
	}

	/* Loading animation */
	.loading-container {
		text-align: center;
		padding: 20px;
	}
</style>
