name: Build and deploy ASP.Net Core app to Azure Web App - Gotorz20250514095933
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      # Diagnostic step to understand the current client setup
      - name: Print Client Program.cs contents
        run: cat Gotorz/Gotorz.Client/Program.cs
          
      # No need to modify BaseAddress since it's already set correctly
          
      # Diagnostic step to understand CORS config
      - name: Print Server CORS config
        run: cat Gotorz/Gotorz/Program.cs | grep -A 10 "AddCors"
          
      - name: Restore dependencies
        run: dotnet restore Gotorz.sln
          
      - name: Build with dotnet
        run: dotnet build Gotorz.sln --configuration Release --no-restore
          
      - name: Publish Server Project (including WebAssembly resources)
        run: dotnet publish Gotorz/Gotorz/Gotorz.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp
          
      - name: Enable logging in web.config
        run: |
          sed -i 's/stdoutLogEnabled="false"/stdoutLogEnabled="true"/' ${{env.DOTNET_ROOT}}/myapp/web.config
          sed -i 's/stdoutLogFile=".\logs\stdout"/stdoutLogFile="D:\home\LogFiles\stdout"/' ${{env.DOTNET_ROOT}}/myapp/web.config
          cat ${{env.DOTNET_ROOT}}/myapp/web.config
          
      # Diagnostic step to see what files are being published
      - name: List published files
        run: |
          echo "Root directory:"
          ls -la ${{env.DOTNET_ROOT}}/myapp
          echo "wwwroot directory:"
          ls -la ${{env.DOTNET_ROOT}}/myapp/wwwroot
          echo "Client resources (_content directory):"
          ls -la ${{env.DOTNET_ROOT}}/myapp/wwwroot/_content || echo "_content directory not found"
          echo "_framework directory:"
          ls -la ${{env.DOTNET_ROOT}}/myapp/wwwroot/_framework || echo "_framework directory not found"
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_32A648A5DB6348958D4C6A3F81A973F9 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_9761B4AD937C4133BD539B18EFD586A6 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F38C5E8DE28D45EE8FA85ED065D6F1A0 }}

      - name: List downloaded artifact contents
        run: ls -R
        
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Gotorz20250514095933'
          slot-name: 'Production'
          package: .
          
      # Add Azure App Settings for production environment
      - name: Configure Azure App Settings
        run: |
          az webapp config appsettings set --name Gotorz20250514095933 \
            --resource-group $(az webapp show --name Gotorz20250514095933 --query resourceGroup --output tsv) \
            --settings ASPNETCORE_ENVIRONMENT=Production
